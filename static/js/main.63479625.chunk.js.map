{"version":3,"sources":["BooksAPI.tsx","components/BookShelfChanger.tsx","components/Book.tsx","components/BookGrid.tsx","components/BookShelf.tsx","models/shelf.tsx","components/ListBooks.tsx","components/SearchBooks.tsx","App.tsx","index.tsx"],"names":["api","token","localStorage","Math","random","toString","substr","headers","BookShelfChanger","book","onUpdateBook","className","value","shelf","onChange","evt","target","disabled","Book","style","width","height","backgroundImage","imageLinks","thumbnail","title","authors","join","BookGrid","books","map","key","id","BookShelf","filter","b","Shelves","name","ListBooks","to","SearchBooks","availableBooks","React","useState","searchedBooks","setSearchedBooks","onInputSearch","query","queryStr","trim","length","fetch","method","body","JSON","stringify","then","res","json","data","BooksAPI","result","Array","isArray","updateSearchedBooks","updatedBooks","shelfBook","find","type","placeholder","event","BooksApp","setBooks","useEffect","changeBookStatus","concat","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63479625.chunk.js","sourcesContent":["import { IBook } from \"./models/book\"\n\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId: number) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book: IBook, shelf: string) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query: string) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\nimport { IBook } from '../models/book'\n\ninterface BookShelfChangerProps {\n  book: IBook;\n  onUpdateBook: Function;\n}\n\nconst BookShelfChanger: React.FC<BookShelfChangerProps> = ({ book, onUpdateBook }) => {\n  return (\n    <div className=\"book-shelf-changer\">\n      <select value={book.shelf || 'none'} onChange={(evt) => {\n        onUpdateBook(book, evt.target.value.toString())\n      }}>\n        <option value=\"move\" disabled>Move to...</option>\n        <option value=\"currentlyReading\">Currently Reading</option>\n        <option value=\"wantToRead\">Want to Read</option>\n        <option value=\"read\">Read</option>\n        <option value=\"none\">None</option>\n      </select>\n    </div>\n  )\n}\n\nexport default BookShelfChanger","import React from 'react'\nimport { IBook } from '../models/book'\nimport BookShelfChanger from './BookShelfChanger'\n\ninterface BookProps {\n  book: IBook;\n  onUpdateBook: Function;\n}\n\nconst Book: React.FC<BookProps> = ({ book, onUpdateBook }) => {\n  return (\n    <div className=\"book\">\n      <div className=\"book-top\">\n        <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${(book.imageLinks && book.imageLinks.thumbnail) || ''})` }}></div>\n        <BookShelfChanger book={book} onUpdateBook={onUpdateBook} />\n      </div>\n      <div className=\"book-title\">{book.title}</div>\n      <div className=\"book-authors\">\n        {book.authors && book.authors.join(', ')}\n      </div>\n    </div>\n  )\n}\n\nexport default Book","import React from 'react'\nimport { IBook } from '../models/book'\nimport Book from './Book'\n\ninterface BookGridProps {\n  books: IBook[];\n  onUpdateBook: Function;\n}\n\nconst BookGrid: React.FC<BookGridProps> = ({ books, onUpdateBook }) => {\n  return (\n    <ol className=\"books-grid\">\n      {books.map((book) => (\n        <li key={book.id}>\n          <Book book={book} onUpdateBook={onUpdateBook} />\n        </li>\n      ))}\n    </ol>\n  )\n}\n\nexport default BookGrid","import React from 'react'\nimport BookGrid from './BookGrid'\nimport { IBook } from '../models/book'\n\ninterface BookShelfProps {\n  id: string,\n  title: string;\n  books: IBook[];\n  onUpdateBook: Function;\n}\n\nconst BookShelf: React.FC<BookShelfProps> = ({ id, title, books, onUpdateBook }) => {\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">{title}</h2>\n      <div className=\"bookshelf-books\">\n        <BookGrid\n          books={books.filter((b) => b.shelf === id)}\n          onUpdateBook={onUpdateBook}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default BookShelf","export interface IShelf {\n  id: string;\n  name: string;\n}\n\nexport const Shelves: IShelf[] = [\n  { id: 'currentlyReading', name: 'Currently Reading' },\n  { id: 'wantToRead', name: 'Want to Read' },\n  { id: 'read', name: 'Read' }\n]","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport BookShelf from './BookShelf'\nimport { IBook } from '../models/book'\nimport { Shelves } from '../models/shelf'\n\ninterface ListBooksProps {\n  books: IBook[];\n  onUpdateBook: Function;\n}\n\nconst ListBooks: React.FC<ListBooksProps> = ({ books, onUpdateBook }) => {\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n      <div className=\"list-books-content\">\n        <div>\n          {Shelves.map((shelf) => (\n            <BookShelf\n              key={shelf.id}\n              id={shelf.id}\n              title={shelf.name}\n              books={books}\n              onUpdateBook={onUpdateBook}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"open-search\">\n        <Link className=\"button\" to=\"/search\">Add a book</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default ListBooks","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { IBook } from '../models/book'\nimport * as BooksAPI from '../BooksAPI'\nimport BookGrid from './BookGrid'\n\ninterface SearchBooksProps {\n  availableBooks: IBook[];\n  onUpdateBook: Function;\n}\n\nconst SearchBooks: React.FC<SearchBooksProps> = ({ availableBooks, onUpdateBook }) => {\n  const [searchedBooks, setSearchedBooks] = React.useState<IBook[]>([])\n\n  const onInputSearch = (query: string) => {\n    const queryStr = query.trim()\n\n    if (queryStr.length <= 2) {\n      // search only if more than 2 characters\n      setSearchedBooks([])\n    } else {\n      BooksAPI.search(queryStr).then((result: IBook[] | {\n        error: string\n      }) => {\n        if (Array.isArray(result)) {\n          updateSearchedBooks(result)\n        } else {\n          setSearchedBooks([])\n        }\n      })\n    }\n  }\n\n  const updateSearchedBooks = (result: IBook[]) => {\n    // if the book is available in already selected books\n    // update books current shelf\n    const updatedBooks = result.map((book: IBook) => {\n      const shelfBook = availableBooks.find( b => b.id === book.id )\n      if (shelfBook) {\n        book.shelf = shelfBook.shelf\n      }\n      return book\n    })\n\n    setSearchedBooks(updatedBooks)\n  }\n\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link to=\"/\" className=\"close-search\">Close</Link>\n        <div className=\"search-books-input-wrapper\">\n          {/*\n            NOTES: The search from BooksAPI is limited to a particular set of search terms.\n            You can find these search terms here:\n            https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n            However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n            you don't find a specific author or title. Every search is limited by search terms.\n          */}\n          <input\n            type=\"text\"\n            placeholder=\"Search by title or author\"\n            onChange={(event) => onInputSearch(event.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <BookGrid books={searchedBooks} onUpdateBook={onUpdateBook} />\n      </div>\n    </div>\n  )\n}\n\nexport default SearchBooks","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport ListBooks from './components/ListBooks'\nimport SearchBooks from './components/SearchBooks'\nimport { IBook } from './models/book'\n\nconst BooksApp = () => {\n  const [books, setBooks] = React.useState<IBook[]>([])\n\n  React.useEffect(() => {\n    BooksAPI.getAll().then((books) => {\n      setBooks(books)\n    })\n  }, [])\n\n  const changeBookStatus = (book: IBook, shelf: string): void => {\n    BooksAPI.update(book, shelf)\n      .then(() => {\n        book.shelf = shelf\n        setBooks(books.filter(b => b.id !== book.id).concat([book]))\n      })\n  }\n\n  return (\n    <div className=\"app\">\n      <Route exact path=\"/\" render={() => (\n        <ListBooks books={books} onUpdateBook={changeBookStatus} />\n      )} />\n      <Route path=\"/search\" render={() => (\n        <SearchBooks\n          availableBooks={books}\n          onUpdateBook={changeBookStatus}\n        />\n      )} />\n    </div>\n  )\n}\n\nexport default BooksApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}